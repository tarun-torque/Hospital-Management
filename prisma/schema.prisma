// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// admin model
model admin {
  id        Int      @id @default(autoincrement())
  name      String   @default("Kanika")
  email     String
  password  String
  secretKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// blogs,ytcontent,article category model
model ContentCategory {
  id       Int    @id @default(autoincrement())
  category String
}

// service model 
model Service {
  id                   Int        @id @default(autoincrement())
  title                String
  imagePath            String
  description          String
  tags                 String[]
  subtitle             String[]
  what_we_will_discuss String[]
  benefits             String[]
  languages            String[]
  duration             Int
  category             Category[]
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String
  coverPath   String
  description String
  Service     Service? @relation(fields: [serviceId], references: [id])
  serviceId   Int?
}

// creator model
model Creator {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  email           String            @unique
  profile_path    String
  profile_type    String
  country_code    String //country code and country name (default 91 India)
  contact_number  String //mobile number
  state           String
  language        String[]
  password        String
  role            String            @default("noRole")
  yt_contents     Yt_content[]
  blog_contents   Blog_content[]
  article_content Article_content[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

// yt model
model Yt_content {
  id           Int      @id @default(autoincrement())
  iframe       String
  heading      String
  content      String
  tags         String[]
  category     String[]
  verified     String   @default("pending") //active,pending,unpublish,rejected,need improvement
  creator      Creator  @relation(fields: [yt_creatorId], references: [id])
  yt_creatorId Int
  createdAt    DateTime @default(now())
  updated      DateTime @updatedAt
}

// article model
model Article_content {
  id                Int      @id @default(autoincrement())
  heading           String
  content           String
  articleImagePath  String
  articleImageType  String
  tags              String[]
  category          String[]
  verified          String   @default("pending") //active,pending,unpublish,rejected,need improvement
  Creator           Creator  @relation(fields: [article_creatorId], references: [id])
  article_creatorId Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// blogs model
model Blog_content {
  id             Int      @id @default(autoincrement())
  heading        String
  content        String
  blogImagePath  String
  blogImageType  String
  tags           String[] //multi
  category       String[] //multi
  verified       String   @default("pending") //active,pending,unpublish,rejected,need improvement
  Creator        Creator  @relation(fields: [blog_creatorId], references: [id])
  blog_creatorId Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//patient models
model Patient {
  id             Int       @id @default(autoincrement())
  username       String    @unique
  patient_name   String
  email          String    @unique
  profile_path   String
  profileType    String
  country_code   String
  contact_number String
  dob            String //selectd dob from calender(dd-mm-yy) to wish birthday of user
  gender         String //male female others
  new_patient    String
  password       String
  support        Support[]
  mood           Mood[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Support {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id])
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mood {
  int             Int     @id @default(autoincrement())
  patientId       Int
  patient         Patient @relation(fields: [patientId], references: [id])
  your_mood_today String
  note            String //optional 
}

// doctor model
model Doctor {
  id                Int      @id @default(autoincrement())
  username          String   @unique
  verified          String   @default("no")
  profile_pic       String
  profile_picType   String
  doctor_name       String
  email             String   @unique
  password          String
  country_code      String
  contact_number    String
  state             String
  languages         String[]
  specialities      String[]
  experience        Int
  maximum_education String
  documents         String
  documents_type    String
  pricePerSession   Int
  status            String?  @default("active")
  remarks           String?  @default("I am active")
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// manager model
model manager {
  id             Int      @id @default(autoincrement())
  name           String
  username       String
  email          String
  state          String
  country_code   String
  contact_number String
  password       String
  verified       String   @default("no")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}