// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// admin model
model admin {
  id        Int      @id @default(autoincrement())
  name      String   @default("Kanika")
  email     String
  password  String
  secretKey String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// blogs,ytcontent,article category model
model ContentCategory {
  id          Int    @id @default(autoincrement())
  category    String @unique
  description String
  image_path  String
}

model Category {
  id              Int       @id @default(autoincrement())
  name            String
  imagePath       String
  services        Service[]
  manager         manager?  @relation(fields: [assignedManager], references: [username])
  assignedManager String
}

model Service {
  id                   Int       @id @default(autoincrement())
  title                String
  imagePath            String
  description          String
  tags                 String[]
  subtitle             String[]
  what_we_will_discuss String[]
  benefits             String[]
  language             String
  duration             Int
  price                Int
  Category             Category? @relation(fields: [categoryId], references: [id])
  categoryId           Int
}

// creator model
model Creator {
  id              Int               @id @default(autoincrement())
  username        String            @unique
  email           String            @unique
  profile_path    String
  profile_type    String
  country         String //country name (default 91 India)
  contact_number  String //mobile number
  state           String
  language        String[]
  password        String
  status          String            @default("active") //active pending temporary off
  remarks         String            @default("no remarks")
  yt_contents     Yt_content[]
  blog_contents   Blog_content[]
  article_content Article_content[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  manager         manager?          @relation(fields: [assignedManager], references: [username])
  assignedManager String
}

// yt model
model Yt_content {
  id           Int      @id @default(autoincrement())
  iframe       String
  heading      String
  content      String
  tags         String[]
  category     String[]
  views        Int      @default(0)
  verified     String   @default("pending") //active,pending,unpublish,rejected,need improvement
  creator      Creator  @relation(fields: [yt_creatorId], references: [id])
  yt_creatorId Int
  createdAt    DateTime @default(now())
  updated      DateTime @updatedAt
}

// article model
model Article_content {
  id                Int      @id @default(autoincrement())
  heading           String
  content           String
  articleImagePath  String
  articleImageType  String
  tags              String[]
  views             Int      @default(0)
  category          String[]
  verified          String   @default("pending") //active,pending,unpublish,rejected,need improvement
  Creator           Creator  @relation(fields: [article_creatorId], references: [id])
  article_creatorId Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

// blogs model
model Blog_content {
  id             Int      @id @default(autoincrement())
  content        String
  tags           String[] //multi
  category       String[] //multi
  verified       String   @default("pending") //active,pending,unpublish,rejected,need improvement
  Creator        Creator  @relation(fields: [blog_creatorId], references: [id])
  blog_creatorId Int
  views          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

//patient models
model Patient {
  id             Int            @id @default(autoincrement())
  username       String?        @unique
  patient_name   String?
  email          String?        @unique
  profile_path   String?
  profileType    String?
  country        String?
  contact_number String?
  dob            String? //selectd dob from calender(dd-mm-yy) to wish birthday of user
  gender         String? //male female others
  new_patient    String?
  otp            String?
  password       String?
  support        Support[]
  mood           Mood[]
  booking        Booking[]
  deviceTokens   deviceTokens[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model patientGoogleSingIn {
  id         Int      @id @default(autoincrement())
  username   String
  email      String   @unique
  profileUrl String?
  fcmToken   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Support {
  id          Int      @id @default(autoincrement())
  patientId   Int
  patient     Patient  @relation(fields: [patientId], references: [id])
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Mood {
  int             Int     @id @default(autoincrement())
  patientId       Int
  patient         Patient @relation(fields: [patientId], references: [id])
  your_mood_today String
  note            String //optional 
}

// doctor model
model Doctor {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  verified           String               @default("no")
  profile_pic        String
  profile_picType    String
  doctor_name        String
  email              String               @unique
  password           String
  country            String
  contact_number     String
  gender             String
  state              String
  languages          String[]
  specialities       String[]
  experience         Int
  maximum_education  String
  documents          String
  documents_type     String
  pricePerSession    Int
  status             String?              @default("active")
  remarks            String?              @default("I am active")
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  manager            manager?             @relation(fields: [assignedManager], references: [username])
  assignedManager    String?
  deviceTokens       deviceTokens[]
  doctorAvailability DoctorAvailability[]
  booking            Booking[]
}

model DoctorAvailability {
  id        Int      @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime
  Doctor    Doctor   @relation(fields: [doctorId], references: [id])
  doctorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Booking {
  id          Int      @id @default(autoincrement())
  patientId   Int
  doctorId    Int
  slotStart   DateTime
  slotEnd     DateTime
  channelName String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Doctor      Doctor   @relation(fields: [doctorId], references: [id])
  Patient     Patient  @relation(fields: [patientId], references: [id])
}

// manager model
model manager {
  id               Int        @id @default(autoincrement())
  name             String
  username         String     @unique
  email            String     @unique
  states           String[]
  countries        String[]
  profile_path     String
  contact_number   String
  password         String
  status           String?    @default("active")
  remarks          String?    @default("I am active")
  creators         Creator[]
  doctors          Doctor[]
  assignedCategory Category[]
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model deviceTokens {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  Doctor    Doctor?  @relation(fields: [doctorId], references: [id])
  doctorId  Int?
  Patient   Patient? @relation(fields: [patientId], references: [id])
  patientId Int?
}
